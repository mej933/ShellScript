#! /usr/bin/env bash

# chkconfig: 2345 80 05
# description: Prometheus Monitoring Server Daemon
# processname: prometheus
# config: /etc/prometheus/prometheus.yml
# pidfile: /var/run/prometheus.pid

### Initialization Info Start
# Creator:           MaxdSre
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start prometheus daemon at boot time
### Initialization Info End

#  tested on
#  1. New lsb that define start-stop-daemon
#  3. Centos with initscripts package installed

### Parameters Default Configuraton Start
NAME=prometheus
DESC='Prometheus Server Daemon'
USER=prometheus
GROUP=prometheus
DAEMON_DIR=/opt/Prometheus/Server
DAEMON=${DAEMON_DIR}/${NAME}
CONF_DIR=/etc/prometheus
CONF_FILE=${CONF_DIR}/prometheus.yml
SYS_CONFIG=/etc/sysconfig/${NAME}
LOG_DIR=/var/log/prometheus
LOG_FILE=${LOG_DIR}/${NAME}.log
PID_FILE=/var/run/${NAME}.pid
LOCK_FILE=/var/lock/subsys/${NAME}
DATA_DIR=${DAEMON_DIR}/Data
# DATA_DIR=/var/lib/prometheus
MAX_OPEN_FILES=1000
### Parameters Default Configuraton End

# Check daemon if exists or executable
if [ ! -x ${DAEMON} ]; then
  echo "Program not installed or not executable"
  exit 5
fi

# init.d / servicectl compatibility (openSUSE)
if [[ -f /etc/rc.status ]]; then
    . /etc/rc.status
    rc_reset
fi

# Source function library. (status/pidofproc/...)
[[ -f /etc/rc.d/init.d/functions ]] && . /etc/rc.d/init.d/functions

# Overwrite settings from default file
[[ -e ${SYS_CONFIG} ]] && . ${SYS_CONFIG}

DAEMON_OPTS="--config.file=${CONF_FILE} --web.read-timeout=3m --web.max-connections=512 --storage.tsdb.path=${DATA_DIR} --storage.tsdb.min-block-duration=1h --storage.tsdb.retention=30d --storage.tsdb.no-lockfile --query.lookback-delta=5m --query.timeout=1m --query.max-concurrency=60 --log.level=info"

# --web.listen-address="0.0.0.0:9090"
# --alertmanager.notification-queue-capacity=10000
# --alertmanager.timeout=10s

function check_status() {
    status -p ${PID_FILE} ${NAME} > /dev/null 2>&1
}

function check_is_root() {
    if [[ $(id -u) -ne 0 ]]; then
        echo "You need root privileges to run this script"
        exit 4
    fi
}

function perparation() {
    if [[ ! -d "${LOG_DIR}" ]]; then
        mkdir -p "${LOG_DIR}"
        touch "${LOG_FILE}"
        chown -R "${USER}":"${GROUP}" "${LOG_DIR}"
        chmod 750 "${LOG_DIR}"
        chmod 640 "${LOG_FILE}"
    fi

    if [[ ! -d "${DATA_DIR}" ]]; then
        mkdir -p "${DATA_DIR}"
        chown -R "${USER}":"${GROUP}" "${DATA_DIR}"
        chmod 750 "${DATA_DIR}"
    fi

    if [ -n "${MAX_OPEN_FILES}" ]; then
      ulimit -n ${MAX_OPEN_FILES}
    fi
}

function start() {
    check_is_root
    check_status
    if [[ $? -eq 0 ]]; then
      echo "${NAME} is already running."
      exit 0
    fi
    perparation

    # Start Daemon
    cd ${DAEMON_DIR}
    echo -n $"Starting ${NAME}: ..."
    daemon --user ${USER} --pidfile="${PID_FILE}" "${DAEMON} ${DAEMON_OPTS} &> ${LOG_FILE} &"
    echo $(pidofproc ${NAME}) > ${PID_FILE}

    # need install package daemonize
    # daemonize -u ${USER} -p ${PID_FILE} -l ${LOCK_FILE} -a -e ${LOG_FILE} -o ${LOG_FILE} ${DAEMON} ${DAEMON_OPTS}
    return=$?
    exit $return
}

function stop() {
    check_is_root
    if [[ -f "${PID_FILE}" ]]; then
        echo -n "Stopping $NAME: ..."
        killproc -p ${PID_FILE} -d 20 ${NAME}
        [[ $? -eq 0 ]] && rm -f "${PID_FILE}" "${LOCK_FILE}"
        echo ''
    else
        echo "${NAME} is not running"
    fi
}


case "$1" in
    status )
        status -p ${PID_FILE} ${NAME}
        exit $?
        ;;
    start )
        start
        ;;
    stop )
        stop
        ;;
    restart|force-reload )
        if [[ -f "${PID_FILE}" ]]; then
            $0 stop
            usleep 15000
        fi
        $0 start
        ;;
    * )
        echo "Usage: $0 {start|stop|restart|force-reload|status}"
        exit 3
        ;;
esac

# Script End
